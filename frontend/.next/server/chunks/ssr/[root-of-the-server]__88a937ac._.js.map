{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///D:/patient/frontend/src/pages/process/%5Bid%5D.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, useCallback } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { debounce } from 'lodash';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    ResponsiveContainer,\n} from 'recharts';\n\ninterface GraphResult {\n    duration_30_m: number;\n    concentration: number;\n}\nconst API_URL = process.env.NEXT_PUBLIC_API_URL;\nconst PatientProcess: React.FC = () => {\n    const params = useParams();\n    const router = useRouter();\n    const patientId = params?.id;\n\n    const [patientName, setPatientName] = useState<string>('');\n    const [weight, setWeight] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [graphData, setGraphData] = useState<GraphResult[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [xAxisDomain, setXAxisDomain] = useState<[number, number]>([0, 100]);\n\n    // Fetch patient name\n    useEffect(() => {\n        if (!patientId) return;\n        fetch(`${API_URL}/patients/${patientId}`)\n            .then(res => res.json())\n            .then(data => {\n                const patient = data.series.result.patient;\n                setPatientName(`${patient.first_name} ${patient.last_name}`);\n            })\n            .catch(console.error);\n    }, [patientId]);\n\n    // Debounced API call\n    const processPatient = useCallback(\n        debounce(async (weightValue: number, heightValue: number) => {\n            if (!patientId) return;\n            setLoading(true);\n\n            try {\n                const res = await fetch(`${API_URL}/patients/${patientId}/process`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        weight: { value: weightValue, unit: 'kg' },\n                        height: { value: heightValue / 100, unit: 'm' },\n                    }),\n                });\n\n                const data = await res.json();\n\n                if (!data.results || data.results.length === 0) {\n                    setGraphData([]);\n                    return;\n                }\n\n                // Keep durations as-is, only adjust X-axis domain\n                const concentrations = data.results.map(d => d.concentration);\n                setXAxisDomain([Math.min(...concentrations), Math.max(...concentrations)]);\n\n                setGraphData(data.results);\n\n            } catch (err) {\n                console.error(err);\n            } finally {\n                setLoading(false);\n            }\n        }, 500),\n        [patientId]\n    );\n\n    // Call API when inputs change\n    useEffect(() => {\n        processPatient(weight, height);\n    }, [weight, height, processPatient]);\n\n    return (\n        <div className=\"flex flex-col h-screen p-6 bg-gray-50\">\n            {/* Header */}\n            <header className=\"flex gap-5 items-center mb-6\">\n                <button\n                    onClick={() => router.push('/')}\n                    className=\"font-medium hover:underline\"\n                >\n                    ‚Üê Back to Patients\n                </button>\n                <h1 className=\"text-2xl font-bold text-gray-800\">{patientName}</h1>\n            </header>\n\n            {/* Main content */}\n            <div className=\"flex flex-1 gap-6 h-full\">\n                {/* Aside Form */}\n                <aside className=\"w-64 p-6 bg-white border rounded-xl shadow-lg flex flex-col gap-6\">\n                    <div>\n                        <label className=\"block text-gray-700 font-medium mb-2\">Weight (kg)</label>\n                        <input\n                            type=\"number\"\n                            value={weight}\n                            onChange={(e) => setWeight(Number(e.target.value))}\n                            className=\"w-full border border-gray-300 px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-300 appearance-none\"\n                            placeholder=\"e.g., 70\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"block text-gray-700 font-medium mb-2\">Height (cm)</label>\n                        <input\n                            type=\"number\"\n                            value={height}\n                            onChange={(e) => setHeight(Number(e.target.value))}\n                            className=\"w-full border border-gray-300 px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-300 appearance-none\"\n                            placeholder=\"e.g., 175\"\n                        />\n                    </div>\n                    {loading && <p className=\"text-sm text-gray-500 mt-2\">Processing...</p>}\n                </aside>\n\n                {/* Graph */}\n                <main className=\"flex-1 p-6 bg-white border rounded-xl shadow-lg flex flex-col\">\n                    <h2 className=\"text-xl text-center font-semibold mb-4\">Sample Concentration Chart</h2>\n                    {graphData.length > 0 ? (\n                        <ResponsiveContainer width=\"100%\" height={500}>\n                            <LineChart data={graphData} margin={{ top: 20, right: 20, left: 0, bottom: 40 }}>\n\n                                <CartesianGrid strokeDasharray=\"4 4\" stroke=\"#e2e8f0\" />\n                                <XAxis\n                                    dataKey=\"concentration\"\n                                    domain={xAxisDomain}\n                                    label={{\n                                        value: 'Sample',\n                                        position: 'insideBottom',\n                                        offset: -5,\n                                        fontSize: 12,\n                                        fill: '#4b5563',\n                                    }}\n                                />\n                                <YAxis\n                                    dataKey=\"duration_30_m\"\n                                    label={{\n                                        value: 'Cencenlration',\n                                        angle: -90,\n                                        position: 'insideLeft',\n                                        fontSize: 12,\n                                        fill: '#4b5563',\n                                    }}\n                                />\n                                <Tooltip\n                                    formatter={(value, name) => {\n                                        if (name === \"duration_30_m\") return [`${value}`, \"Duration (30 min)\"];\n                                        if (name === \"concentration\") return [`${value}`, \"Concentration\"];\n                                        return value;\n                                    }}\n                                />\n                                <Line\n                                    type=\"monotone\"\n                                    dataKey=\"duration_30_m\"\n                                    stroke=\"#3b82f6\"\n                                    strokeWidth={3}\n                                    dot={{ r: 4 }}\n                                    activeDot={{ r: 6 }}\n                                />\n                            </LineChart>\n                        </ResponsiveContainer>\n                    ) : (\n                        <p className=\"text-gray-500 mt-10 text-center\">\n                            Enter weight and height to see the graph\n                        </p>\n                    )}\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default PatientProcess;\n"],"names":[],"mappings":"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","debugId":null}}]
}