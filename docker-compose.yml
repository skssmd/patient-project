
services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: patient
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    ports:
      - "5432:5432"
    networks:
      - traefik

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    working_dir: /app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DEBUG=1
      - SECRET_KEY=supersecret
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/patient
      - ALLOWED_HOSTS=*
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    depends_on:
      - postgres
    restart: always
    networks:
      - traefik

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - PORT=3000
      - NEXT_PUBLIC_API_URL=/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - backend
    restart: always
    networks:
      - traefik

  traefik:
    image: traefik:v3.4
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always
    networks:
      - traefik

volumes:
  postgres_data:

networks:
  traefik:
